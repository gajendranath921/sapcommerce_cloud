import { CdkDrag, CdkDragDrop, CdkDragStart, CdkDragMove, CdkDropList } from '@angular/cdk/drag-drop';
import { EventEmitter } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Trigger, TriggerAction, TriggerActionId, TriggerType } from 'personalizationcommons';
import { FetchStrategy, IConfirmationModalService } from 'smarteditcommons';
import { TriggerService } from '../TriggerService';
import { SegmentDragAndDropService } from './SegmentDragAndDropService';
export declare class SegmentNodeComponent {
    private triggerService;
    private confirmationModalService;
    private translateService;
    private dragDropService;
    expression: Trigger[];
    node: Trigger;
    connectedDropListsIds: string[];
    expressionChange: EventEmitter<Trigger[]>;
    onDrop: EventEmitter<CdkDragDrop<Trigger>>;
    onDragStart: EventEmitter<CdkDragStart>;
    fetchStrategy: FetchStrategy<TriggerAction>;
    collapsed: boolean;
    private elementToDuplicate;
    constructor(triggerService: TriggerService, confirmationModalService: IConfirmationModalService, translateService: TranslateService, dragDropService: SegmentDragAndDropService);
    ngOnInit(): void;
    onDragDrop(event: CdkDragDrop<Trigger>): void;
    onDragStarted(event: CdkDragStart<any>): void;
    onDragMoved(event: CdkDragMove<any>): void;
    onDragReleased(): void;
    canBeDropped: (drag: CdkDrag, drop: CdkDropList) => boolean;
    newSubItem(type: TriggerType): void;
    removeItem(uid: string): Promise<void>;
    operationChange(operation: TriggerActionId): void;
    toggle(): void;
    duplicateItem(elementToDuplicate: Trigger): void;
    handleUpdate(exp: Trigger[]): void;
    isContainerWithDropzone(element: Trigger): boolean;
    isItem(element: Trigger): boolean;
    isContainer(element: Trigger): boolean;
    isTopContainer(): boolean;
    isEmptyContainer(node: Trigger): boolean;
    private findElementAndDuplicate;
    private removeFromNode;
    private findParentByUid;
}
