import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { Customization, CustomizationVariation, PersonalizationsmarteditDateUtils, PersonalizationsmarteditUtils, TargetGroupState, Trigger } from 'personalizationcommons';
import { IConfirmationModalService, LogService, SliderPanelConfiguration } from 'smarteditcommons';
import { CustomizationViewService } from '../CustomizationViewService';
import { TriggerService } from '../TriggerService';
import { ModalFullScreenButtonComponent } from './modalFullScreenButton';
import { CustomizationVariationListItem } from './targetGroupVariationList';
export declare class TargetGroupTabComponent implements OnInit, OnDestroy {
    persoDateUtils: PersonalizationsmarteditDateUtils;
    private persoUtils;
    private persoTriggerService;
    private confirmationModalService;
    private customizationViewService;
    private logService;
    private cdr;
    modalFullScreenButtonCmp: ModalFullScreenButtonComponent;
    readonly sliderPanelConfiguration: SliderPanelConfiguration;
    readonly sliderPanelShow: () => Promise<void>;
    readonly sliderPanelHide: () => Promise<void>;
    customization: Customization;
    edit: TargetGroupState;
    isVariationLoaded: boolean;
    isFullscreen: boolean;
    visibleVariations: CustomizationVariation[];
    private editVariationSubscription;
    private customizationViewStateSubscription;
    constructor(persoDateUtils: PersonalizationsmarteditDateUtils, persoUtils: PersonalizationsmarteditUtils, persoTriggerService: TriggerService, confirmationModalService: IConfirmationModalService, customizationViewService: CustomizationViewService, logService: LogService, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    isCustomizationEnabled(customization: Customization): boolean;
    getActivityStateForCustomization(customization: Customization): string;
    toggleSliderFullscreen(enableFullscreen: boolean): void;
    onSegmentViewExpressionChange(expression: Trigger[]): void;
    setVariationRank(variationListItem: CustomizationVariationListItem, increaseValue: number, $event: PointerEvent, firstOrLast: boolean): void;
    showConfirmForDefaultTrigger(isDefault: boolean): Promise<void>;
    removeVariation(variation: CustomizationVariation): Promise<void>;
    updateVariation(variationToUpdate: CustomizationVariation): void;
    showAddVariationPanel(): void;
    showEditVariationPanel(variation: CustomizationVariation): void;
    private setSliderConfigForAdd;
    private setSliderConfigForEditing;
    private canSaveVariation;
    private isSavedVariationValidOrEmpty;
    private setVariations;
    private onAddVariation;
    private onSaveEditedVariation;
    private cancelChangesClick;
    private isVariationSelected;
    private clearEditedVariationDetails;
}
