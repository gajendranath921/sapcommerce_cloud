import { IPersonalizationsmarteditContextMenuServiceProxy, PersonalizationsmarteditUtils, ContextMenuDto, Personalization, Customize, CombinedView, SeData } from 'personalizationcommons';
import { PersonalizationsmarteditComponentHandlerService } from 'personalizationsmartedit/service/PersonalizationsmarteditComponentHandlerService';
import { PersonalizationsmarteditContextService } from 'personalizationsmartedit/service/PersonalizationsmarteditContextServiceInner';
import { CrossFrameEventService } from 'smarteditcommons';
export declare class PersonalizationsmarteditContextualMenuService {
    protected personalizationsmarteditContextService: PersonalizationsmarteditContextService;
    protected personalizationsmarteditComponentHandlerService: PersonalizationsmarteditComponentHandlerService;
    protected personalizationsmarteditUtils: PersonalizationsmarteditUtils;
    protected personalizationsmarteditContextMenuServiceProxy: IPersonalizationsmarteditContextMenuServiceProxy;
    protected crossFrameEventService: CrossFrameEventService;
    static readonly EDIT_PERSONALIZATION_IN_WORKFLOW = "personalizationsmartedit.editPersonalizationInWorkflow.enabled";
    contextPersonalization: Personalization;
    contextCustomize: Customize;
    contextCombinedView: CombinedView;
    contextSeData: SeData;
    private isWorkflowRunningBoolean;
    constructor(personalizationsmarteditContextService: PersonalizationsmarteditContextService, personalizationsmarteditComponentHandlerService: PersonalizationsmarteditComponentHandlerService, personalizationsmarteditUtils: PersonalizationsmarteditUtils, personalizationsmarteditContextMenuServiceProxy: IPersonalizationsmarteditContextMenuServiceProxy, crossFrameEventService: CrossFrameEventService);
    updateWorkflowStatus(): Promise<void>;
    openDeleteAction(config: ContextMenuDto): void;
    openAddAction(config: ContextMenuDto): void;
    openEditAction(config: ContextMenuDto): void;
    openEditComponentAction(config: ContextMenuDto): void;
    isCustomizationFromCurrentCatalog(config: ContextMenuDto): boolean;
    isPersonalizationAllowedInWorkflow(): boolean;
    isContextualMenuAddItemEnabled(config: ContextMenuDto): boolean;
    isContextualMenuEditItemEnabled(config: ContextMenuDto): boolean;
    isContextualMenuDeleteItemEnabled(config: ContextMenuDto): boolean;
    isContextualMenuShowActionListEnabled(config: any): boolean;
    isContextualMenuInfoEnabled(): boolean;
    isContextualMenuInfoItemEnabled(): boolean;
    isContextualMenuEditComponentItemEnabled(config: ContextMenuDto): boolean;
    private isEditPersonalizationInWorkflowAllowed;
    private isCustomizeObjectValid;
    private isContextualMenuEnabled;
    private isElementHighlighted;
    private isSlotInCurrentCatalog;
    private isComponentInCurrentCatalog;
    private isSelectedCustomizationFromCurrentCatalog;
    private init;
    private refreshContext;
    private getSelectedVariationCode;
    private getSelectedCustomization;
    private getSlotsToRefresh;
}
